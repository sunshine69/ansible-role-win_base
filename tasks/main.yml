- name: Make sure ansible-install dir exist
  win_file:
    path: '{{ ansible_install_dir }}'
    state: directory

- name: Make sure directories in win_base_dirs exist
  win_file:
    path: '{{ item.path }}'
    state: directory
  with_items: "{{ win_base_dirs }}"

- name: Make sure the directories permissions are set properly in win_base_dirs
  win_acl:
    path: "{{ item.path }}"
    inherit: "{{ item.inherit|default(omit) }}"
    propagation: "{{ item.propagation|default(omit) }}"
    rights: "{{ item.rights }}"
    state: "{{ item.state|default(omit) }}"
    type: "{{ item.type }}"
    user: "{{ item.user }}"
  with_items: "{{ win_base_dirs }}"
  when: item.rights|default() and item.type|default() and item.user|default()

- set_fact:
    machine_arch: "{{ 'x86' if ansible_env.PROCESSOR_ARCHITECTURE == 'x86' else 'x86_64' }}"

- name: Install winlogbeat to ship window event log
  win_chocolatey:
    name: winlogbeat
    state: present
    version: "{{ winlogbeat_version }}"
  when: logstash_endpoint_list is defined and logstash_endpoint_list

- name: Install google-chrome to make our life easier
  win_chocolatey:
    name: googlechrome
    state: present

- name: Deploy winlogbeat config
  win_template:
    src: "winlogbeat.yml"
    dest: '{{ chocolatey_lib_path }}\winlogbeat\tools\winlogbeat-{{ winlogbeat_version }}-windows-{{ machine_arch }}\winlogbeat.yml'
  notify: Enable winlogbeat service
  when: logstash_endpoint_list is defined and logstash_endpoint_list

- name: Create directory to store certificates
  win_file:
    path: '{{ win_base_certificate_dir }}'
    state: directory

- name: Copy certificate files needed to import into the remote host
  win_copy:
    src: '{{ item.src }}'
    dest: '{{ win_base_certificate_dir }}\{{ item.src|win_basename }}'
  with_items: "{{ win_base_certificates }}"

- name: Import/Export certificate
  win_certificate_store:
    file_type: "{{ item.file_type|default(omit) }}"
    key_exportable: "{{ item.key_exportable|default('yes') }}"
    key_storage: "{{ item.key_storage|default(omit) }}"
    password: "{{ item.password|default(omit) }}"
    path: '{{ win_base_certificate_dir }}\{{ item.src|win_basename }}'
    state: "{{ item.state|default(omit) }}"
    store_location: "{{ item.store_location|default(omit) }}"
    store_name: "{{ item.store_name|default(omit) }}"
    thumbprint: "{{ item.thumbprint|default(omit) }}"
  with_items: "{{ win_base_certificates }}"
  when: not item.use_powershell|default()
  no_log: True

- include_tasks: "import-certs-use-powershell.yml"
  with_items: "{{ win_base_certificates }}"
  when: cert_item.use_powershell|default()
  loop_control:
    loop_var: cert_item

# This requires a custom win_disk_management.py
# https://github.com/ansible/ansible/pull/27634
# The module return error if run the second time. Until it get fixed and merged
# we just ignore_errors here, it does not cause any harm anyway

- name: set fact win_base_extra_disk_list
  set_fact:
    win_base_extra_disk_list: "{{ ec2_volumes[1:] + ec2_persistent_volumes|default([]) }}"

- name: Set up extra disk storage
  win_disk_management:
    number: "{{ item.number|default(1) }}"
    partition_style_set: "{{ item.partition_style_set|default('gpt') }}"
    access_path: "{{ item.access_path|default(omit) }}"
    drive_letter: "{{ item.drive_letter }}"
    file_system: "{{ item.file_system|default('ntfs') }}"
    label: "{{ item.label|default('data'+(item.disk_number|default(1))|string) }}"
    allocation_unit_size: "{{ item.allocation_unit_size|default(4) }}"
    large_frs: "{{ item.large_frs|default(omit) }}"
  with_items: "{{ win_base_extra_disk_list }}"
  when: win_base_extra_disk_list
  ignore_errors: yes

- name: Copy the turn-on-offline-disks.ps1 script
  win_template:
    src: 'turn-on-offline-disks.ps1'
    dest: '{{ ansible_install_dir }}\turn-on-offline-disks.ps1'
  register: win_base_turn-on-offline-disks_template

- name: Run turn-on-offline-disks.ps1
  win_command: 'powershell {{ ansible_install_dir }}\turn-on-offline-disks.ps1'
  when: win_base_turn-on-offline-disks_template.changed

- name: Deploy the role ansible setup PS scripts
  win_template:
    dest: '{{ ansible_install_dir }}\win_base-custom-setup.ps1'
    src: 'win_base-custom-setup.ps1.j2'
  register: win_base_custom_setup_template

- name: Run the custom setup powershell script
  win_command: 'powershell {{ ansible_install_dir }}\win_base-custom-setup.ps1'
  ignore_errors: yes
  when: win_base_custom_setup_template.changed

- block:
    - name: Deploy the content of custom_powershell_commands as remote scripts
      win_copy:
        content: "{{ custom_powershell_commands }}"
        dest: '{{ ansible_install_dir }}\temporary-script.ps1'

    - name: Run the role based custom setup powershell commands from custom_powershell_commands
      win_command: 'powershell {{ ansible_install_dir }}\temporary-script.ps1'
  rescue:
    - debug:
        msg: "Some error running custom_powershell_commands"
  always:
    - name: clean up temporary script
      win_file:
        path: '{{ ansible_install_dir }}\temporary-script.ps1'
        state: absent
  when: custom_powershell_commands is defined and custom_powershell_commands

- include_tasks: deploy_scheduled_tasks.yml
  with_items: "{{ win_base_scheduled_tasks|default([]) }}"
  loop_control:
    loop_var: win_base_scheduled_tasks_item

- name: Setting up firewall rules on variable win_firewall_rules
  win_firewall_rule:
    name: "{{ item.name }}"
    localip: "{{ item.localip|default(omit) }}"
    localport: "{{ item.localport|default(item.port) }}"
    action: "{{ item.action|default('allow') }}"
    direction: "{{ item.direction|default('in') }}"
    protocol: "{{ item.protocol }}"
    state: "{{ item.state|default('present') }}"
    enabled: "{{ item.enabled|default('yes') }}"
    profiles: "{{ item.profiles|default(omit) }}"
    remoteip: "{{ item.remoteip|default(omit) }}"
    remoteport: "{{ item.remoteport|default(omit) }}"
    service: "{{ item.service|default(omit) }}"
    program: "{{ item.program|default(omit) }}"
    description: "{{ item.description }}"
  with_items: "{{ win_firewall_rules|default([]) }}"

# This seems to be window bug. I use this ansible module or my own PS script to
# set password it always return InvalidCredentialsError but the password is
# actually changed.

# So we need to do two things. Fireup the instance first, and then manually get
# the password via aws console. Then re-run the playbook which select the
# spawned instance - provide the initial_password.
# From now on we no longer need initial_password.

- name: Set admin password
  win_user:
    name: Administrator
    password: "{{ admin_password }}"
    state: present
    update_password: always
  ignore_errors: yes
  no_log: True
  when: initial_password is defined and initial_password

- name: Change ansible admin password
  set_fact:
    ansible_password: "{{ admin_password }}"
  no_log: True
  when: initial_password is defined and initial_password
  vars:
    ansible_connection: local
