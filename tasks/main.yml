- name: Make sure ansible-install dir exist
  win_file:
    path: '{{ ansible_install_dir }}'
    state: directory

- name: Install chocolatey
  win_shell: "Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"

# Ansible bug? Happen with all version basically can not do string concat with
# backslash

- set_fact:
    ansible_install_dir_with_backslash: >
      {{ ansible_install_dir }}\

- name: Download dependencies install files for chocolatey packages
  win_get_url:
    url: "{{ item.url }}"
    dest: "{{ item.savepath|default(ansible_install_dir_with_backslash|trim + item.url|basename) }}"
  with_items: "{{ chocolatey_pkgs }}"
  when: item.url|default()

- name: Install chocolatey pkgs
  win_chocolatey:
    name: "{{ item.name }}"
    state: "{{ item.state|default('present') }}"
    version: "{{ item.version|default(omit) }}"
    source: "{{ item.source|default(omit) }}"
    skip_scripts: "{{ item.skip_scripts|default(omit) }}"
    proxy_url: "{{ item.proxy_url|default(omit) }}"
    proxy_username: "{{ item.proxy_username|default(omit) }}"
    proxy_password: "{{ item.proxy_password|default(omit) }}"
    install_args: "{{ item.install_args|default(omit) }}"
    ignore_dependencies: "{{ item.ignore_dependencies|default(omit) }}"
    ignore_checksums: "{{ item.ignore_checksums|default(omit) }}"
    force: "{{ item.force|default(omit) }}"
    allow_prerelease: "{{ item.allow_prerelease|default(omit) }}"
    allow_empty_checksums: "{{ item.allow_empty_checksums|default(omit) }}"
    params: "{{ item.params|default(omit) }}"
    timeout: "{{ item.timeout|default(omit) }}"
  with_items: "{{ chocolatey_pkgs }}"
  when: not item.download_only|default(False)

- include_tasks: install_msi_mods.yml
  with_items: "{{ win_base_msi_pkgs|default([]) }}"
  loop_control:
    loop_var: task_item

- name: Ensure local account user is present
  win_user:
    name: "{{ item.name }}"
    fullname: "{{ item.fullname|default(omit) }}"
    account_disabled: "{{ item.account_disabled|default(omit) }}"
    account_locked: "{{ item.account_locked|default(omit) }}"
    description: "{{ item.description|default(omit) }}"
    groups_action: "{{ item.groups_action|default(omit) }}"
    password_expired: "{{ item.password_expired|default(omit) }}"
    password_never_expires: "{{ item.password_never_expires|default('yes') }}"
    update_password: "{{ item.update_password|default(omit) }}"
    user_cannot_change_password: "{{ item.user_cannot_change_password|default(omit) }}"
    password: "{{ item.password }}"
    state: present
    groups: "{{ ['Users'] + item.groups|default([]) }}"
  with_items: "{{ win_base_local_users|default([]) }}"
  no_log: True

- name: Ensure user's right properly setup
  win_user_right:
    name: "{{ item.name }}"
    users: "{{ item.users }}"
    action: "{{ item.action }}"
  with_items: "{{ win_user_rights|default([]) }}"
  no_log: True

- name: Make sure directories in win_base_dirs exist
  win_file:
    path: '{{ item.path }}'
    state: directory
  with_items: "{{ win_base_dirs }}"

- name: Make sure the directories permissions are set properly in win_base_dirs
  win_acl:
    path: "{{ item.path }}"
    inherit: "{{ item.inherit|default(omit) }}"
    propagation: "{{ item.propagation|default(omit) }}"
    rights: "{{ item.rights }}"
    state: "{{ item.state|default(omit) }}"
    type: "{{ item.type }}"
    user: "{{ item.user }}"
  with_items: "{{ win_base_dirs }}"
  when: item.rights|default() and item.type|default() and item.user|default()

- set_fact:
    machine_arch: "{{ 'x86' if ansible_env.PROCESSOR_ARCHITECTURE == 'x86' else 'x86_64' }}"

- name: Install winlogbeat to ship window event log
  win_chocolatey:
    name: winlogbeat
    state: present
    version: "{{ winlogbeat_version }}"
  when: logstash_endpoint_list is defined and logstash_endpoint_list

- name: Deploy winlogbeat config
  win_template:
    src: "winlogbeat.yml"
    dest: '{{ chocolatey_lib_path }}\winlogbeat\tools\winlogbeat-{{ winlogbeat_version }}-windows-{{ machine_arch }}\winlogbeat.yml'
  notify: Enable winlogbeat service
  when: logstash_endpoint_list is defined and logstash_endpoint_list

- name: Install firefox browser to make our life easier
  win_chocolatey:
    name: firefox
    state: present

- name: Create directory to store certificates
  win_file:
    path: '{{ win_base_certificate_dir }}'
    state: directory

- name: Copy certificate files needed to import into the remote host from local
  win_copy:
    src: '{{ item.src }}'
    dest: '{{ win_base_certificate_dir }}\{{ item.src|win_basename }}'
  with_items: "{{ win_base_certificates }}"
  when: not (item.src is search('^http[s]*:\/\/'))

# These publicly pfx file should be be encrypted
- name: Copy certificate files needed to import into the remote host from https
  win_get_url:
    url: '{{ item.src }}'
    dest: '{{ win_base_certificate_dir }}\{{ item.src|win_basename }}'
  with_items: "{{ win_base_certificates }}"
  when: item.src is search('^http[s]*:\/\/')

- include_tasks: upload-certs-from-s3.yml
  when: task_item.src|urlsplit('scheme') == 's3'
  with_items: "{{ win_base_certificates }}"
  loop_control:
    loop_var: task_item

- name: Import/Export certificate
  win_certificate_store:
    file_type: "{{ item.file_type|default(omit) }}"
    key_exportable: "{{ item.key_exportable|default('yes') }}"
    key_storage: "{{ item.key_storage|default(omit) }}"
    password: "{{ item.password|default(omit) }}"
    path: '{{ win_base_certificate_dir }}\{{ item.src|win_basename }}'
    state: "{{ item.state|default(omit) }}"
    store_location: "{{ item.store_location|default(omit) }}"
    store_name: "{{ item.store_name|default(omit) }}"
    thumbprint: "{{ item.thumbprint|default(omit) }}"
  with_items: "{{ win_base_certificates }}"
  when: not item.use_powershell|default()
  no_log: True

- include_tasks: "import-certs-use-powershell.yml"
  with_items: "{{ win_base_certificates }}"
  when: cert_item.use_powershell|default()
  no_log: True
  loop_control:
    loop_var: cert_item


- block:
    - name: set fact win_base_extra_disk_list
      set_fact:
        win_base_extra_disk_list: "{{ ec2_volumes[1:] + ec2_persistent_volumes|default([]) }}"

    # This requires a custom win_disk_management.py
    # https://github.com/ansible/ansible/pull/27634
    # The module return error if run the second time. Until it get fixed and merged
    # we just ignore_errors here, it does not cause any harm anyway

    - name: Set up extra disk storage
      win_disk_management:
        number: "{{ item.number|default(1) }}"
        partition_style_set: "{{ item.partition_style_set|default('gpt') }}"
        access_path: "{{ item.access_path|default(omit) }}"
        drive_letter: "{{ item.drive_letter }}"
        file_system: "{{ item.file_system|default('ntfs') }}"
        label: "{{ item.label|default('data'+(item.disk_number|default(1))|string) }}"
        allocation_unit_size: "{{ item.allocation_unit_size|default(4) }}"
        large_frs: "{{ item.large_frs|default(omit) }}"
      with_items: "{{ win_base_extra_disk_list }}"
      when: win_base_extra_disk_list
      ignore_errors: yes

    - block:
        # TODO - this doesn't work for
        - name: Copy the turn-on-offline-disks.ps1 script
          win_template:
            src: 'turn-on-offline-disks.ps1'
            dest: '{{ ansible_install_dir }}\turn-on-offline-disks.ps1'
          register: win_base_turn_on_offline_disks_template

        - name: Run turn-on-offline-disks.ps1
          win_command: 'powershell {{ ansible_install_dir }}\turn-on-offline-disks.ps1'
          when: win_base_turn_on_offline_disks_template.changed or force_reset_disks|default()
          ignore_errors: yes
  when: ec2_volumes|default([])|length == 1

- name: Deploy the role ansible setup PS scripts
  win_template:
    dest: '{{ ansible_install_dir }}\win_base-custom-setup.ps1'
    src: 'win_base-custom-setup.ps1.j2'
  register: win_base_custom_setup_template

- name: Run the custom setup powershell script
  win_command: 'powershell {{ ansible_install_dir }}\win_base-custom-setup.ps1'
  ignore_errors: yes
  when: win_base_custom_setup_template.changed

- block:
    - name: Deploy the content of custom_powershell_commands as remote scripts
      win_copy:
        content: "{{ custom_powershell_commands }}"
        dest: '{{ ansible_install_dir }}\temporary-script.ps1'

    - name: Run the role based custom setup powershell commands from custom_powershell_commands
      win_command: 'powershell {{ ansible_install_dir }}\temporary-script.ps1'
  rescue:
    - debug:
        msg: "Some error running custom_powershell_commands"
  always:
    - name: clean up temporary script
      win_file:
        path: '{{ ansible_install_dir }}\temporary-script.ps1'
        state: absent
  when: custom_powershell_commands is defined and custom_powershell_commands

- include_tasks: deploy_scheduled_tasks.yml
  with_items: "{{ win_base_scheduled_tasks|default([]) }}"
  loop_control:
    loop_var: win_base_scheduled_tasks_item

- name: Setting up firewall rules on variable win_firewall_rules
  win_firewall_rule:
    name: "{{ item.name }}"
    localip: "{{ item.localip|default(omit) }}"
    localport: "{{ item.localport|default(item.port) }}"
    action: "{{ item.action|default('allow') }}"
    direction: "{{ item.direction|default('in') }}"
    protocol: "{{ item.protocol }}"
    state: "{{ item.state|default('present') }}"
    enabled: "{{ item.enabled|default('yes') }}"
    profiles: "{{ item.profiles|default(omit) }}"
    remoteip: "{{ item.remoteip|default(omit) }}"
    remoteport: "{{ item.remoteport|default(omit) }}"
    service: "{{ item.service|default(omit) }}"
    program: "{{ item.program|default(omit) }}"
    description: "{{ item.description }}"
  with_items: "{{ win_firewall_rules|default([]) }}"

# https://msdn.microsoft.com/en-us/library/dd374073.aspx for the win_location
# value mapping to country
- name: Update regional settings
  win_region:
    format: "{{ win_culture|default('en-AU') }}"
    unicode_language: "{{ win_unicode_language|default('en-AU') }}"
    location: "{{ win_location|default(12) }}"
    copy_settings: True
  register: region_setting_result

- name: create tempdir
  win_tempfile:
    state: directory
  register: tempdir

- name: download packages
  win_get_url:
    url: "{{ item.url }}"
    dest: "{{ tempdir.path }}"
  with_items: "{{ win_base_package_urls }}"

- name: install packages
  win_package:
    path: '{{ tempdir.path }}\{{ item.url|basename }}'
    creates_path: "{{ item.creates_path|default(omit) }}"
    creates_version: "{{ item.creates_version|default(omit) }}"
    creates_service: "{{ item.creates_service|default(omit) }}"
    product_id: "{{ item.product_id|default(omit) }}"
  with_items: "{{ win_base_package_urls }}"

# This seems to be window bug. I use this ansible module or my own PS script to
# set password it always return InvalidCredentialsError but the password is
# actually changed.

# So we need to do two things. Fireup the instance first, and then manually get
# the password via aws console. Then re-run the playbook which select the
# spawned instance - provide the initial_password.
# From now on we no longer need initial_password.

- name: Set admin password
  win_user:
    name: Administrator
    password: "{{ admin_password }}"
    state: present
    update_password: always
  ignore_errors: yes
  no_log: True
  when: initial_password is defined and initial_password

- name: Change ansible admin password
  set_fact:
    ansible_password: "{{ admin_password }}"
  no_log: True
  when: initial_password is defined and initial_password
  vars:
    ansible_connection: local

- pause:
    prompt: "You need to restart the machine to apply the regional settings. Go and reboot the machine manually. I will wait for 15 minutes"
    minutes: 15
  when: region_setting_result.restart_required
