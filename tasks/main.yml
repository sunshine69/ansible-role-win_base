- name: Make sure ansible-install dir exist
  win_file:
    path: '{{ ansible_install_dir }}'
    state: directory

- set_fact:
    machine_arch: "{{ 'x86' if ansible_env.PROCESSOR_ARCHITECTURE == 'x86' else 'x86_64' }}"

- name: Install winlogbeat to ship window event log
  win_chocolatey:
    name: winlogbeat
    state: present
    version: "{{ winlogbeat_version }}"
  when: logstash_endpoint_list is defined and logstash_endpoint_list

- name: Install google-chrome to make our life easier
  win_chocolatey:
    name: googlechrome
    state: present

- name: Deploy winlogbeat config
  win_template:
    src: "winlogbeat.yml"
    dest: '{{ chocolatey_lib_path }}\winlogbeat\tools\winlogbeat-{{ winlogbeat_version }}-windows-{{ machine_arch }}\winlogbeat.yml'
  notify: Enable winlogbeat service
  when: logstash_endpoint_list is defined and logstash_endpoint_list

# powershell_certificate_file_ext will be used in templates to make a decision
# if we import the cert only for trust certs or the pfx file which has both key
# and cert for listener
- block:
    - name: Get the powershell_certificate_file_name
      set_fact:
        powershell_certificate_file_name: '{{ powershell_certificate_file_path|win_basename }}'
    - name: Detect cert ext
      set_fact:
        powershell_certificate_file_ext: '{{ powershell_certificate_file_name|splitext|list|last }}'

- name: Install certificate for Powershell
  win_copy:
    src: '{{ powershell_certificate_file_path }}'
    dest: '{{ ansible_install_dir }}\{{ powershell_certificate_file_name }}'

# This requires a custom win_disk_management.py and I forgot where I got it now
# TODO <find it>
- name: Set up extra disk storage
  win_disk_management:
    number: "{{ item.number|default(1) }}"
    partition_style_set: "{{ item.partition_style_set|default('gpt') }}"
    access_path: "{{ item.access_path }}"
    file_system: "{{ item.file_system|default('ntfs') }}"
    label: "{{ item.label|default('data'+item.disk_number|default(1)) }}"
    allocation_unit_size: "{{ item.allocation_unit_size|default(4) }}"
    large_frs: "{{ item.large_frs|default(omit) }}"
  with_items: "{{ ec2_volumes[1:] }}"
  when: ec2_volumes[1:]

- name: Deploy the role ansible setup PS scripts
  win_template:
    dest: '{{ ansible_install_dir }}\win_base-custom-setup.ps1'
    src: 'win_base-custom-setup.ps1.j2'

- name: Run the custom setup powershell script
  win_command: 'powershell {{ ansible_install_dir }}\win_base-custom-setup.ps1'
  args:
    creates: '{{ ansible_install_dir }}\win_base-custom-setup.hasrun'
  ignore_errors: yes

- block:
    - name: Deploy the content of custom_powershell_commands as remote scripts
      win_copy:
        content: "{{ custom_powershell_commands }}"
        dest: '{{ ansible_install_dir }}\temporary-script.ps1'

    - name: Run the role based custom setup powershell commands from custom_powershell_commands
      win_command: 'powershell {{ ansible_install_dir }}\temporary-script.ps1'
  rescue:
    - debug:
        msg: "Some error running custom_powershell_commands"
  always:
    - name: clean up temporary script
      win_file:
        path: '{{ ansible_install_dir }}\temporary-script.ps1'
        state: absent
  when: custom_powershell_commands is defined and custom_powershell_commands

- include_tasks: deploy_scheduled_tasks.yml
  with_items: "{{ win_base_scheduled_tasks|default([]) }}"
  loop_control:
    loop_var: win_base_scheduled_tasks_item

- name: Setting up firewall rules on variable win_firewall_rules
  win_firewall_rule:
    name: "{{ item.name }}"
    localip: "{{ item.localip|default(omit) }}"
    localport: "{{ item.localport|default(item.port) }}"
    action: "{{ item.action|default('allow') }}"
    direction: "{{ item.direction|default('in') }}"
    protocol: "{{ item.protocol }}"
    state: "{{ item.state|default('present') }}"
    enabled: "{{ item.enabled|default('yes') }}"
    profiles: "{{ item.profiles|default(omit) }}"
    remoteip: "{{ item.remoteip|default(omit) }}"
    remoteport: "{{ item.remoteport|default(omit) }}"
    service: "{{ item.service|default(omit) }}"
    program: "{{ item.program|default(omit) }}"
    description: "{{ item.description }}"
  with_items: "{{ win_firewall_rules|default([]) }}"

# This seems to be window bug. I use this ansible module or my own PS script to
# set password it always return InvalidCredentialsError but the password is
# actually changed.

# So we need to do two things. Fireup the instance first, and then manually get
# the password via aws console. Then re-run the playbook which select the
# spawned instance - provide the initial_password.
# From now on we no longer need initial_password.

- name: Set admin password
  win_user:
    name: Administrator
    password: "{{ admin_password }}"
    state: present
    update_password: always
  ignore_errors: yes
  when: initial_password is defined and initial_password

- name: Change ansible admin password
  set_fact:
    ansible_password: "{{ admin_password }}"
  no_log: True
  when: initial_password is defined and initial_password
  vars:
    ansible_connection: local
